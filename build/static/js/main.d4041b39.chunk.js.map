{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","isError","classPicker","className","Filter","props","value","filter","onChange","AddEntry","onSubmit","addName","newName","handleNameChange","newPhone","handlePhoneChange","type","SingleEntry","person","name","number","onClick","handleClick","personService","setNotificationMessage","initPersons","setPersons","setTimeout","catch","setIsError","setNewName","setNewPhone","FilteredEntries","persons","map","key","App","useState","setFilter","notificationMessage","useEffect","filteredPersons","toLowerCase","indexOf","handleFilterChange","event","target","preventDefault","nameObj","find","match","returnedPerson","concat","error","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d4041b39.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst deleteEntry = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update, deleteEntry };\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\n\nconst Notification = ({ message, isError }) => {\n  if (message === null) {\n    return null;\n  }\n  let classPicker = isError ? \"error\" : \"notification\";\n  return <div className={classPicker}>{message}</div>;\n};\n\nconst Filter = (props) => {\n  return (\n    <>\n      <form>\n        <div>\n          filter shown with\n          <input value={props.filter} onChange={props.onChange()} />\n        </div>\n      </form>\n    </>\n  );\n};\n\nconst AddEntry = (props) => {\n  return (\n    <form onSubmit={props.addName}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        phone:{\" \"}\n        <input value={props.newPhone} onChange={props.handlePhoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst SingleEntry = (props) => {\n  return (\n    <>\n      <p>\n        {props.person.name} {props.person.number}{\" \"}\n        <button id={props.person.id} onClick={() => handleClick(props)}>\n          delete\n        </button>\n      </p>\n    </>\n  );\n};\n\nconst handleClick = (props) => {\n  personService\n    .deleteEntry(props.person.id)\n    .then(() => {\n      props.setNotificationMessage(`${props.person.name} deleted.`);\n      personService.getAll().then((initPersons) => {\n        props.setPersons(initPersons);\n      });\n      setTimeout(() => {\n        props.setNotificationMessage(null);\n      }, 5000);\n    })\n    .catch(() => {\n      props.setIsError(true);\n      props.setNotificationMessage(`${props.person.name} was already deleted.`);\n      personService.getAll().then((initPersons) => {\n        props.setPersons(initPersons);\n      });\n      setTimeout(() => {\n        props.setNotificationMessage(null);\n        props.setIsError(false);\n      }, 5000);\n    });\n  props.setNewName(\"\");\n  props.setNewPhone(\"\");\n};\n\nconst FilteredEntries = (props) => {\n  return (\n    <>\n      {props.persons.map((person) => (\n        <SingleEntry\n          key={person.id}\n          person={person}\n          setPersons={props.setPersons}\n          persons={props.persons}\n          setNotificationMessage={props.setNotificationMessage}\n          setIsError={props.setIsError}\n          setNewName={props.setNewName}\n          setNewPhone={props.setNewPhone}\n        />\n      ))}\n    </>\n  );\n};\n\nconst App = (props) => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newPhone, setNewPhone] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    personService.getAll().then((initPersons) => {\n      setPersons(initPersons);\n    });\n  }, []);\n\n  const filteredPersons = persons.filter(\n    (person) => person.name.toLowerCase().indexOf(filter) > -1\n  );\n\n  const addName = (event) => {\n    event.preventDefault();\n    const nameObj = {\n      name: newName,\n      number: newPhone,\n    };\n\n    if (persons.find((match) => match.name === newName)) {\n      let id = persons.find((person) => person.name === newName).id;\n\n      personService\n        .update(id, nameObj)\n        .then(() => {\n          setNotificationMessage(`Number for ${newName} changed.`);\n          personService.getAll().then((initPersons) => {\n            setPersons(initPersons);\n          });\n          setNewName(\"\");\n          setNewPhone(\"\");\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n        })\n        .catch(() => {\n          setIsError(true);\n          setNotificationMessage(`${newName} is no longer in the database.`);\n          personService.getAll().then((initPersons) => {\n            setPersons(initPersons);\n          });\n          setNewName(\"\");\n          setNewPhone(\"\");\n          setTimeout(() => {\n            setNotificationMessage(null);\n            setIsError(false);\n          }, 5000);\n        });\n    } else {\n      personService\n        .create(nameObj)\n        .then((returnedPerson) => {\n          setPersons(persons.concat(returnedPerson));\n          setNewName(\"\");\n          setNewPhone(\"\");\n        })\n        .catch((error) => {\n          setIsError(true);\n          setNotificationMessage(`${error.response.data}`);\n          setNewName(\"\");\n          setNewPhone(\"\");\n          setTimeout(() => {\n            setNotificationMessage(null);\n            setIsError(false);\n          }, 5000);\n        });\n    }\n  };\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter filter={filter} onChange={() => handleFilterChange} />\n      <h2>Add a new</h2>\n      <AddEntry\n        addName={addName}\n        handleNameChange={handleNameChange}\n        handlePhoneChange={handlePhoneChange}\n        newName={newName}\n        newPhone={newPhone}\n      />\n      <h2>Numbers</h2>\n      <FilteredEntries\n        setPersons={setPersons}\n        persons={filteredPersons}\n        setNotificationMessage={setNotificationMessage}\n        setIsError={setIsError}\n        setNewName={setNewName}\n        setNewPhone={setNewPhone}\n      />\n      <Notification message={notificationMessage} isError={isError} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}